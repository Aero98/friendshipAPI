declare const options: {
	/** Base url to prefix urls in fetch requests  */
	host?: string;
	/**
	 * Intercepts url before getting passed to fetch
	 * @param path url received from all api methods
	 */
	intercept?: (path: string) => string;
	fetch?: typeof fetch;
};
declare type MethodInit =
	| string
	| {
			fetch?: typeof fetch;
			path: string;
	  };
/**	GET request with fetch */
export declare const get: (
	init: MethodInit,
	token?: string | undefined
) => Promise<{
	response: Response;
	body: string | Record<string, any>;
}>;
/**	DELETE request with fetch */
export declare const del: (
	init: MethodInit,
	token?: string | undefined
) => Promise<{
	response: Response;
	body: string | Record<string, any>;
}>;
/**	POST request with fetch */
export declare const post: (
	init: MethodInit,
	data: any,
	token?: string | undefined
) => Promise<{
	response: Response;
	body: string | Record<string, any>;
}>;
/**	PUT request with fetch */
export declare const put: (
	init: MethodInit,
	data: any,
	token?: string | undefined
) => Promise<{
	response: Response;
	body: string | Record<string, any>;
}>;
declare const _default: {
	/** Use api with additional options by initializing this function */
	init({ host, intercept, fetch }: typeof options): void;
	get: (
		init: MethodInit,
		token?: string | undefined
	) => Promise<{
		response: Response;
		body: string | Record<string, any>;
	}>;
	del: (
		init: MethodInit,
		token?: string | undefined
	) => Promise<{
		response: Response;
		body: string | Record<string, any>;
	}>;
	post: (
		init: MethodInit,
		data: any,
		token?: string | undefined
	) => Promise<{
		response: Response;
		body: string | Record<string, any>;
	}>;
	put: (
		init: MethodInit,
		data: any,
		token?: string | undefined
	) => Promise<{
		response: Response;
		body: string | Record<string, any>;
	}>;
};
export default _default;
