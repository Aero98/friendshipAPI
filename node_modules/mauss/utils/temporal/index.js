import tokenizer from './masks';
export const dt = {
	get now() {
		return new Date();
	},
	new: function (d) {
		if (d instanceof Date) return d;
		return d ? new Date(d) : this.now;
	},
	format(date, mask = 'DDDD, DD MMMM YYYY', base) {
		if (Number.isNaN((date = this.new(date)))) {
			throw SyntaxError('Invalid Date');
		}
		const tokens = tokenizer({ date, base });
		return mask.replace(
			/D{1,4}|M{1,4}|YY(?:YY)?|([hHmsAPap])\1?|Z{1,3}|\[([^\]\[]|\[[^\[\]]*\])*\]/g,
			($) => ($ in tokens ? tokens[$]() : $.slice(1, $.length - 1))
		);
	},
	travel({ from, to }) {
		if (Number.isNaN((from = this.new(from)))) {
			throw SyntaxError('Invalid Date');
		}
		const [days, fragment = '0'] = `${to}`.split('.');
		const sign = days[0] === '-' ? -1 : 1;
		const hours = Math.round(+`0.${fragment}` * 24);
		const epoch = sign * (Math.abs(+days * 24) + hours);
		return this.new(+from + epoch * /* 1 hour */ 36e5);
	},
};
