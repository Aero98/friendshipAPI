declare type EmptyString = '';
declare type Nullish = null | undefined;
declare type Empty = EmptyString | Nullish;
declare type Falsy = 0 | false | EmptyString | Nullish;
declare type Primitives = string | number | bigint | boolean | symbol;
/** @returns true if input is not `nullish` or an empty string */
export declare const exists: <T>(i: Empty | T) => i is T;
/** @returns true if input is `null` or `undefined` */
export declare const nullish: <T>(i: Primitives | T) => i is T;
/** @returns true if input is truthy in general */
export declare const truthy: <T>(i: Falsy | T) => i is T;
/** @returns true if input exists or is a number greater than 0 */
export declare const natural: <T>(i: Empty | T) => i is T;
/** @returns true if input exists or is a number greater than or equal to 0 */
export declare const whole: <T>(i: Empty | T) => i is T;
/** @returns negation of the guard function passed, e.g. `not(nullish)` */
export declare function not<F extends typeof exists | typeof nullish | typeof truthy>(
	fn: F
): <T>(
	i:
		| T
		| (F extends <T_1>(i: Empty | T_1) => i is T_1
				? Primitives
				: F extends <T_2>(i: Primitives | T_2) => i is T_2
				? Nullish
				: Empty)
) => i is T;
export {};
