import type { AnyFunction, Reverse } from '../typings';
/**
 * inverse - reverses the order of provided arguments to fn parameters
 * @param fn any function with one or more arguments
 * @returns a curried function to take in the arguments
 */
export declare function inverse<T extends AnyFunction>(fn: T): AnyFunction<Reverse<Parameters<T>>>;
/**
 * unique - transform an array to a set and back to array
 * @param array items to be inspected
 * @returns duplicate-free version of the array input
 */
export declare function unique<T>(array: T[]): T[];
/**
 * regexp - implementation of global RegExp constructor with escaped pattern
 * @param pattern passed in the form of string literal
 * @param flags unique set of characters from `d|g|i|m|s|u|y`
 * @returns dynamically constructed RegExp object
 */
export declare function regexp(pattern: string, flags?: string): RegExp;
