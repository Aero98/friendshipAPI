const patterns = {
	'date:complete': /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,
	'date:time': /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)/,
	date: /\d{4}-[01]\d-[0-3]\d/,
	time: /[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)/,
};
export const compare = {
	date: (x, y) => new Date(y).getTime() - new Date(x).getTime(),
	time: (x, y) => Date.parse(`2017/08/28 ${y}`) - Date.parse(`2017/08/28 ${x}`),
	// primitives
	undefined: (x) => (x ? -1 : 1),
	boolean: (x, y) => +y - +x,
	number: (x, y) => y - x,
	bigint: (x, y) => (x < y ? -1 : x > y ? 1 : 0),
	symbol: (x, y) => x.toString().localeCompare(y.toString()),
	string(x, y) {
		for (const [pattern, exp] of Object.entries(patterns)) {
			const [type] = pattern.split(':');
			if (exp.test(x) && exp.test(y)) return this[type](x, y);
		}
		return x.localeCompare(y);
	},
	// object + null
	object(x, y) {
		if (x === null) return 1;
		if (y === null) return -1;
		return comparator(x, y);
	},
	// wildcard *
	wildcard(x, y) {
		if (x == null) return 1;
		if (y == null) return -1;
		const [tx, ty] = [typeof x, typeof y];
		if (tx === 'function') return 0;
		if (tx !== ty) {
			const cx = JSON.stringify(x);
			const cy = JSON.stringify(y);
			return this.string(cx, cy);
		}
		const constrained = this[tx];
		return constrained(tx, ty);
	},
};
export function comparator(x, y) {
	const common = [...new Set([...Object.keys(x), ...Object.keys(y)])].filter(
		(k) => k in x && k in y && typeof x[k] === typeof y[k] && x[k] !== y[k]
	);
	for (
		let i = 0, key = common[i], data = typeof x[key];
		i < common.length && x[key] !== null && y[key] !== null;
		key = common[++i], data = typeof x[key]
	) {
		if (data === 'function') continue;
		if (data === 'object') return comparator(x[key], y[key]);
		const constrained = compare[data];
		if (data in compare) return constrained(x[key], y[key]);
	}
	return 0;
}
