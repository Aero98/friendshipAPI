import type { Filter, Split } from '../typings';
declare type Primitives = {
	undefined: (x: undefined, y: undefined) => number;
	boolean: (x: boolean, y: boolean) => number;
	number: (x: number, y: number) => number;
	string: (x: string, y: string) => number;
	bigint: (x: bigint, y: bigint) => number;
	symbol: (x: symbol, y: symbol) => number;
	object: (x: object, y: object) => number;
};
declare const patterns: {
	'date:complete': RegExp;
	'date:time': RegExp;
	date: RegExp;
	time: RegExp;
};
declare type PatternKeys = keyof typeof patterns;
declare type Categories = Split<PatternKeys, ':'>[0];
declare type Prefixed<K extends string> = K extends `${infer P}:${string}`
	? Filter<P, Categories>
	: K;
declare type Comparisons = Primitives & {
	[K in Prefixed<PatternKeys>]: (x: string, y: string) => number;
};
export declare const compare: Comparisons & {
	wildcard: (x: any, y: any) => number;
};
export declare function comparator(x: Record<string, any>, y: Record<string, any>): number;
export {};
